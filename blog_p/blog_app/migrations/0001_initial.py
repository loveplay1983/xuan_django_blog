# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2018-07-22 10:39
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(blank=True, default='avatar/default.png', max_length=200, null=True, upload_to='avatar/%Y/%m', verbose_name='Avatar')),
                ('qq', models.CharField(blank=True, max_length=20, null=True, verbose_name='QQ')),
                ('mobile', models.CharField(blank=True, max_length=11, null=True, unique=True, verbose_name='Mobile')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'User',
                'ordering': ['-id'],
                'verbose_name': 'User',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Ad',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='AD_Title')),
                ('description', models.CharField(max_length=200, verbose_name='AD_Description')),
                ('image_url', models.ImageField(upload_to='ad/%Y/%m', verbose_name='Img_URL')),
                ('callback_url', models.URLField(blank=True, null=True, verbose_name='Callback_URL')),
                ('date_publish', models.DateTimeField(auto_now_add=True, verbose_name='Date_Publish')),
                ('index', models.IntegerField(default=999, verbose_name='Ordering(ASC)')),
            ],
            options={
                'verbose_name_plural': 'AD',
                'ordering': ['index', 'id'],
                'verbose_name': 'AD',
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='Article_Title')),
                ('desc', models.CharField(max_length=50, verbose_name='Article_Description')),
                ('content', models.TextField(verbose_name='Article_Content')),
                ('click_count', models.IntegerField(default=0, verbose_name='Click_Count')),
                ('is_recommend', models.BooleanField(default=False, verbose_name='Is_Recommend')),
                ('date_publish', models.DateTimeField(auto_now_add=True, verbose_name='Date_Publish')),
            ],
            options={
                'verbose_name_plural': 'Article',
                'ordering': ['-date_publish'],
                'verbose_name': 'Article',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Category')),
                ('index', models.IntegerField(default=999, verbose_name='Ordering(ASC)')),
            ],
            options={
                'verbose_name_plural': 'Category',
                'ordering': ['index', 'id'],
                'verbose_name': 'Category',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='Comment_Content')),
                ('date_publish', models.DateTimeField(auto_now_add=True, verbose_name='Date_Publish')),
                ('article', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='blog_app.Article', verbose_name='Article')),
                ('pid', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='blog_app.Comment', verbose_name='Parent_Comment')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name_plural': 'Comment',
                'ordering': ['-date_publish'],
                'verbose_name': 'Comment',
            },
        ),
        migrations.CreateModel(
            name='Links',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='Link_Title')),
                ('description', models.CharField(max_length=200, verbose_name='Link_Description')),
                ('callback_url', models.URLField(verbose_name='URL')),
                ('date_publish', models.DateTimeField(auto_now_add=True, verbose_name='Date_Publish')),
                ('index', models.IntegerField(default=999, verbose_name='Ordering(ASC)')),
            ],
            options={
                'verbose_name_plural': 'Friendly_Link',
                'ordering': ['index', 'id'],
                'verbose_name': 'Friendly_Link',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Tag')),
            ],
            options={
                'verbose_name_plural': 'Tag',
                'ordering': ['id'],
                'verbose_name': 'Tag',
            },
        ),
        migrations.AddField(
            model_name='article',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='blog_app.Category', verbose_name='Category'),
        ),
        migrations.AddField(
            model_name='article',
            name='tag',
            field=models.ManyToManyField(to='blog_app.Tag', verbose_name='Tag'),
        ),
        migrations.AddField(
            model_name='article',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
    ]
